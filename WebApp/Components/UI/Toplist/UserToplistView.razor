@using WebApp.DataServices.Services.TMDB
@using WebApp.DataServices.Services.User
@using Data.Domain
@using EFCore.Utils
@using System.Security.Claims
@inject IDataService DataService
@inject IUserService UserService
@inject IToplistService ToplistService
@inject IHttpContextAccessor HttpContextAccessor

@if (_items.Count == 0)
{
    <MudText Typo="Typo.h3" Style="padding: 40px">Your Top List is empty :(</MudText>
}
else
{
   <MudTable Items="@_items" Hover="true" Dense="false" Striped="true" Bordered="false">
       <ColGroup>
           <col style="width: 20%;" />
           <col style="width: 30%;"/>
           <col style="width: 20%;"/>
           <col style="width: 10%;"/>
           <col style="width: 10%;"/>
           <col style="width: 10%;"/>
       </ColGroup>
       <ToolBarContent>
           <MudText Typo="Typo.h4">My Top List</MudText>
           <MudSpacer/>
       </ToolBarContent>
       <HeaderContent>
           @* InitialDirection="SortDirection.Ascending" SortBy="new Func<Element, object>(x=>x.Name)" </MudTableSortLabel> *@
           <MudTh>Rank</MudTh>
           <MudTh>Title</MudTh>
           <MudTh>Release Date</MudTh>
           <MudTh>Move Up</MudTh>
           <MudTh>Move Down</MudTh>
           <MudTh>Remove</MudTh>
       </HeaderContent>
       <RowTemplate>
           <MudTd DataLabel="@nameof(Model.Rank)">@context.Rank</MudTd>
           <MudTd DataLabel="@nameof(Model.Title)">@context.Title</MudTd>
           <MudTd DataLabel="@nameof(Model.ReleaseDate)">@context.ReleaseDate</MudTd>
           <MudTd Title="up">
               <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.ArrowUpward" Color="Color.Default" OnClick="@(async () => await OnUp(@context))"/>
           </MudTd>
           <MudTd DataLabel="down">
               <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.ArrowDownward" Color="Color.Default" OnClick="@(async () => await OnDown(@context))"/>
           </MudTd>
           <MudTd DataLabel="down">
               <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" Color="Color.Primary" OnClick="@(async () => await OnDelete(@context))"/>
           </MudTd>
       </RowTemplate>
   </MudTable> 
}




@code {
    public string extarnalUserId { get; set; }

    private User? User { get; set; }
    private List<Model> _items = new();

    protected override async Task OnInitializedAsync()
    {
        extarnalUserId = HttpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value;
        
        if (!await ToplistService.InitToplist(extarnalUserId))
            throw new Exception("user is not registered");
        User = await UserService.GetUserByExtarnalIdAsync(extarnalUserId);
        RefreshItems();
    }

    private void RefreshItems()
    {
        foreach (var topListItem in User.TopLists)
        {
            _items.Add(new(topListItem.TopListIndex, topListItem.Movie.Title, topListItem.Movie.ReleaseDate,
                topListItem.Movie.TMDBExternalId));
        }
    }

    public class Model
    {
        public Model(int rank, string title, string releaseDate, string extarnalId)
        {
            Rank = rank;
            Title = title;
            ReleaseDate = releaseDate;
            ExtarnalId = extarnalId;
        }

        public int Rank { get; set; }
        public string Title { get; set; }
        public string ReleaseDate { get; set; }
        public string ExtarnalId { get; set; }
    }


    private async Task OnDown(Model item)
    {
        User = await ToplistService.MoveDownInToplistAsync(item.ExtarnalId, UserService.GetUserByExtarnalIdAsync(extarnalUserId).GetAwaiter().GetResult().Id);
        RefreshItems();
        StateHasChanged();
    }

    private async Task OnUp(Model item)
    {
        User = await ToplistService.MoveUpInToplistAsync(item.ExtarnalId, UserService.GetUserByExtarnalIdAsync(extarnalUserId).GetAwaiter().GetResult().Id);
        RefreshItems();
        StateHasChanged();
    }

    private async Task OnDelete(Model item)
    {
        User = await ToplistService.RemoveFromToplistAsync(item.ExtarnalId, UserService.GetUserByExtarnalIdAsync(extarnalUserId).GetAwaiter().GetResult().Id);
        RefreshItems();
        StateHasChanged();
    }

}