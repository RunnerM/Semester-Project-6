@inherits LayoutComponentBase


<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
        <MudItem Style="padding-bottom:22px">
            <MudAutocomplete T="string" Label="Search.." SearchFunc="@searchf" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Default"/>
        </MudItem>
        <MudSpacer/>
        <MudMenu FullWidth="true">
            <ActivatorContent>
                <MudChip Icon="@Icons.Material.Filled.Person" Color="Color.Primary"> Profile </MudChip>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem>Settings</MudMenuItem>
                <MudMenuItem>Sign Out</MudMenuItem>
            </ChildContent>
        </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="@open" Elevation="1" Color="Color.Primary">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6"> <MudIcon Icon="@Icons.Material.Filled.Api" Color="Color.Info"/>Media Platform</MudText>
        </MudDrawerHeader>
        <MudDivider Class="my-2" />
        <NavMenu/>
    </MudDrawer>
    <MudMainContent Class="pt-16 px-16">
        <MudContainer Class="mt-6">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code{
    bool open = false;

    void ToggleDrawer()
    {
        open = !open;
    }

    //This will be 'done' when we have the context.
    private async Task<IEnumerable<string>> searchf(string value)
    {
    // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

    // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
    //return context.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        return new string[0];
    }

}

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>